# -*- coding: utf-8 -*-
"""Student_Rank_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10vb68RkrgZ5nWT_E8IAuWHXVLjy3j-wx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

json_file_path = '/content/Historical_Quiz_Data.json'

with open(json_file_path, 'r') as file:
    data = json.load(file)

df = pd.DataFrame(data)

print("Data Types Before Cleaning:")
print(df.dtypes)

# Clean the data
if df['accuracy'].dtype != 'object':
    df['accuracy'] = df['accuracy'].astype(str)

df['accuracy'] = df['accuracy'].str.replace('%', '').astype(float) / 100

df['final_score'] = df['final_score'].astype(float)
df['negative_score'] = df['negative_score'].astype(float)

df['correct_answer_ratio'] = df['correct_answers'] / df['total_questions']
df['incorrect_answer_ratio'] = df['incorrect_answers'] / df['total_questions']
df['net_score'] = df['score'] - df['negative_score']



# Convert rank_text to integer
df['rank_text'] = df['rank_text'].str.replace('Topic Rank - #', '').astype(int)

min_marks = df['score'].min()
print("Minimum Marks:", min_marks)

max_marks = df['score'].max()
print("Maximum Marks:", max_marks)

std_dev = df['score'].std()
print("Standard Deviation of Scores:", std_dev)

features = df[['score', 'accuracy', 'final_score', 'negative_score', 'correct_answers', 'incorrect_answers']]
target = df['rank_text']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression

model = LinearRegression()

cv_scores = cross_val_score(model, features, target, cv=5)
print("Cross-Validation Scores:", cv_scores)
print("Mean CV Score:", np.mean(cv_scores))

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Predicted Ranks:", y_pred)
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

# Visualization
sns.set(style="whitegrid")

plt.figure(figsize=(10, 6))
sns.histplot(df['score'], bins=20, kde=True)
plt.title('Distribution of Scores')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.show()

# Box Plot of Scores
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['score'])
plt.title('Box Plot of Scores')
plt.xlabel('Score')
plt.show()

# Scatter Plot of Score vs. Accuracy
plt.figure(figsize=(10, 6))
sns.scatterplot(x='score', y='accuracy', data=df)
plt.title('Score vs. Accuracy')
plt.xlabel('Score')
plt.ylabel('Accuracy')
plt.show()

# Bar Plot of Average Scores by Trophy Level
plt.figure(figsize=(10, 6))
sns.barplot(x='trophy_level', y='score', data=df, estimator=np.mean)
plt.title('Average Score by Trophy Level')
plt.xlabel('Trophy Level')
plt.ylabel('Average Score')
plt.show()

# Heatmap of Correlation Matrix
plt.figure(figsize=(10, 6))
correlation_matrix = df[['score', 'accuracy', 'final_score', 'negative_score', 'correct_answers',
                          'incorrect_answers', 'rank_text', 'correct_answer_ratio',
                          'incorrect_answer_ratio', 'net_score']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""current quiz"""

import json
import matplotlib.pyplot as plt
import matplotlib.patches as patches

# Define the path to the JSON file
json_file_path = '/content/current_quiz_data.json'

# Load the JSON data from the file
with open(json_file_path, 'r') as file:
    quiz_data = json.load(file)

# Extract quiz information
quiz_title = quiz_data['quiz']['title'] if quiz_data['quiz']['title'] else "No Title"
quiz_description = quiz_data['quiz']['description']
quiz_topic = quiz_data['quiz']['topic']
quiz_duration = quiz_data['quiz']['duration']
questions = quiz_data['quiz']['questions']

# Create a figure and axis for the visualization
fig, ax = plt.subplots(figsize=(12, 8))

# Add a title for the quiz
ax.set_title(f"Quiz: {quiz_title}", fontsize=16)

# Draw the quiz box
quiz_box = patches.Rectangle((0.05, 0.75), 0.9, 0.2, edgecolor='black', facecolor='lightblue', lw=2)
ax.add_patch(quiz_box)
ax.text(0.5, 0.88, f"Title: {quiz_title}", fontsize=12, ha='center', va='center')
ax.text(0.5, 0.82, f"Topic: {quiz_topic}", fontsize=10, ha='center', va='center')
ax.text(0.5, 0.76, f"Duration: {quiz_duration} minutes", fontsize=10, ha='center', va='center')

# Check if there are questions
if questions:
    # Draw the question box for the first question
    question = questions[0]
    question_text = question['description']

    question_box = patches.Rectangle((0.05, 0.45), 0.9, 0.2, edgecolor='black', facecolor='lightgreen', lw=2)
    ax.add_patch(question_box)
    ax.text(0.5, 0.58, f"Question: {question_text}", fontsize=10, ha='center', va='center', wrap=True)

# Draw options for the first question
    options = question['options']
    for i, option in enumerate(options):
        option_text = f"{i + 1}. {option['description']}"
        ax.text(0.5, 0.4 - i * 0.05, option_text, fontsize=10, ha='center', va='center')

# Draw detailed solution box
detailed_solution = question['detailed_solution']
solution_box = patches.Rectangle((0.05, 0.05), 0.9, 0.3, edgecolor='black', facecolor='lightyellow', lw=2)
ax.add_patch(solution_box)
ax.text(0.5, 0.25, "Detailed Solution:", fontsize=12, ha='center', va='center')
ax.text(0.5, 0.15, detailed_solution.replace('\n', ' '), fontsize=8, ha='center', va='center', wrap=True)

# Set limits and hide axes
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.axis('off')

# Show the plot
plt.tight_layout()
plt.show()

"""**Quiz Submission Data**"""

import json
import matplotlib.pyplot as plt

# Define the path to the JSON file
json_file_path = '/content/Quiz_Submission_Data.json'

with open(json_file_path, 'r') as file:
    submission_data = json.load(file)

# Extract submission information
quiz_title = submission_data['quiz'].get('title', 'No Title')
score = submission_data.get('score', 0)
accuracy = submission_data.get('accuracy', 0)
correct_answers = submission_data.get('correct_answers', 0)
incorrect_answers = submission_data.get('incorrect_answers', 0)
total_questions = submission_data.get('total_questions', correct_answers + incorrect_answers)

# Prepare data for the pie chart
labels = ['Correct Answers', 'Incorrect Answers']
sizes = [correct_answers, incorrect_answers]
colors = ['#4CAF50', '#F44336']  # Green for correct, red for incorrect
explode = (0.1, 0)  # Slightly explode the correct answers slice

# Plot the pie chart
plt.figure(figsize=(8, 8))
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True, startangle=140)
plt.title(f'{quiz_title}\nScore: {score}/{total_questions} | Accuracy: {accuracy}')
plt.show()

# Prepare data for the bar chart
labels_bar = ['Final Score', 'Negative Score', 'Total Questions']
values_bar = [score, submission_data.get('negative_score', 0), total_questions]

labels_bar = ['Final Score', 'Negative Score', 'Total Questions']
negative_score = submission_data.get('negative_score', 0)
if isinstance(negative_score, str):
    negative_score = float(negative_score)
values_bar = [score, negative_score, total_questions]

future_scores = []
for i in range(1, 6):
    predicted_score = score + (correct_answers * (i * 0.1))
    future_scores.append(predicted_score)

plt.figure(figsize=(8, 5))
plt.plot(range(1, 6), future_scores, marker='o', linestyle='-', color='purple')
plt.title('Predicted Future Scores')
plt.xlabel('Quiz Number')
plt.ylabel('Predicted Score')
plt.xticks(range(1, 6))
plt.grid()
plt.show()

